<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\ReportExport;
use Illuminate\Support\Str;


class ChatController extends Controller
{
    public $longTextVar = null;


    public function chatFn(Request $request)
    {
        if ($this->longTextVar === null) {
            $this->longTextVar = Storage::disk('public')->get('fileContent/DashbaordContent.txt');
        }

        $request->validate([
            'message' => 'required|string',
        ]);

        $message = $request->input('message');

        try {
            $api_key_open_ai = config('services.openai.api_key_1');

            $context = "This is the provided business data:\n\n" . $this->longTextVar;

            $systemMessage = $this->getDescriptionDetails();

            $messages = [
                ['role' => 'system', 'content' => $systemMessage],
                ['role' => 'user', 'content' => "User input: $message\n\nBusiness Data:\n$context"],
            ];

            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $api_key_open_ai,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => 'gpt-4o',
                'messages' => $messages,
                'temperature' => 1,
                'max_tokens' => 500,
                'top_p' => 1,
                'frequency_penalty' => 0,
                'presence_penalty' => 0,
            ]);

            if ($response->successful()) {
                $data = $response->json();
                $content = $data['choices'][0]['message']['content'] ?? null;

                if ($content) {
                    $textResponse = trim($content);
                    $reportData = null;

                    $pattern = '/```php(.*?)```/s';
                    $patternArray = '/```\s*(\[.*?\])\s*```/s';

                    if (preg_match($pattern, $textResponse, $matches) || preg_match($patternArray, $textResponse, $matches)) {
                        $parsedData = $this->parseBotArrayString($matches[1]);

                        $path = 'reports/report_' . now()->format('Ymd_His') . '.xlsx';
                        $export = new ReportExport($parsedData);
                        $filePath = storage_path('app/public/' . $path);
                        Excel::store($export, $path, 'public');

                        $reportData = [
                            'report_path' => asset('storage/' . $path),
                            'report_filename' => 'report.xlsx',
                        ];

                        $textResponse = preg_replace($pattern, '', $textResponse);
                    }


                    return response()->json([
                        'success' => true,
                        'reply' => $textResponse,
                        'report' => $reportData,
                    ]);
                } else {
                    return response()->json([
                        'success' => false,
                        'error' => 'Unexpected response format from API.',
                        'raw_response' => $data,
                    ], 500);
                }
            } else {
                return response()->json([
                    'success' => false,
                    'error' => 'Error communicating with AI service.',
                    'status_code' => $response->status(),
                ], $response->status());
            }
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Server error: ' . $e->getMessage(),
            ], 500);
        }
    }

    private function parseBotArrayString(string $arrayString): array
    {
        $arrayString = trim($this->extractArrayContent($arrayString));

//        \Log::info('Parsing array string:', ['arrayString' => $arrayString]);

        try {
            $evaluated = eval("return $arrayString;");

            if (is_array($evaluated) && isset($evaluated['header']) && isset($evaluated['data'])) {
                return $evaluated;
            }
        } catch (\Throwable $e) {
            \Log::error('Error parsing array:', ['error' => $e->getMessage()]);
            return [
                'header' => [],
                'data' => [],
            ];
        }

        return [
            'header' => [],
            'data' => [],
        ];
    }

    private function extractArrayContent($response)
    {
        return trim(preg_replace('/^```php|^```|^php|\s*```$/m', '', trim($response)));
    }


    public function handleVoice(Request $request)
    {
        if ($this->longTextVar === null) {
            $this->longTextVar = Storage::disk('public')->get('fileContent/DashbaordContent.txt');
        }

        $apiKey4 = config('services.openai.api_key_1');

        if (!$request->hasFile('audio')) {
            return response()->json([
                'success' => false,
                'error' => 'No audio file received.',
            ], 400);
        }

        try {
            $audioFile = $request->file('audio');


            if (!$audioFile) {
                return response()->json(['success' => false, 'error' => 'No audio file received.'], 400);
            }


            Storage::makeDirectory('voice');

            $fileName = uniqid() . '.mp3';
            $fullPath = storage_path('app/temp/' . $fileName);
            copy($audioFile->getRealPath(), $fullPath);

            if (!file_exists($fullPath)) {
                return response()->json([
                    'success' => false,
                    'error' => 'Failed to save audio file.',
                ]);
            }


            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $apiKey4,
            ])->attach(
                'file',
                file_get_contents($fullPath),
                'voice-message.mp3', // filename
                ['Content-Type' => 'audio/mp3'] // specify MIME type manually
            )->post('https://api.openai.com/v1/audio/transcriptions', [
                'model' => 'whisper-1',
            ]);

//            Log::info('response: ',['response' => $response->json()]);

            if ($response->successful()) {
                $messages = $this->getMessage($response->json()['text']);

                $chat = Http::withHeaders([
                    'Authorization' => 'Bearer ' . $apiKey4,
                ])->post('https://api.openai.com/v1/chat/completions', [
                    'model' => 'gpt-4o',
                    'messages' => $messages,
                ]);

                if ($chat->successful()) {
                    $data = $chat->json();
                    $content = $data['choices'][0]['message']['content'] ?? null;

                    if ($content) {
                        $textResponse = trim($content);
                        $reportData = null;

                        $pattern = '/```php(.*?)```/s';
                        $patternArray = '/```\s*(\[.*?\])\s*```/s';
                        $patternPlainArray = "/\[\s*'header'\s*=>\s*\[.*?\],\s*'data'\s*=>\s*\[.*?\]\s*\]/s";

                        if (preg_match($pattern, $textResponse, $matches) || preg_match($patternArray, $textResponse, $matches) || preg_match($patternPlainArray, $textResponse, $matches)) {
                            $parsedData = $this->parseBotArrayString($matches[1]);

                            $path = 'reports/report_' . now()->format('Ymd_His') . '.xlsx';
                            $export = new ReportExport($parsedData);
                            $filePath = storage_path('app/public/' . $path);
                            Excel::store($export, $path, 'public');

                            $reportData = [
                                'report_path' => asset('storage/' . $path),
                                'report_filename' => 'report.xlsx',
                            ];

                            $textResponse = preg_replace($pattern, '', $textResponse);
                        }

                        return response()->json([
                            'success' => true,
                            'reply' => $textResponse,
                            'report' => $reportData,
                        ]);
                    } else {
                        return response()->json([
                            'success' => false,
                            'error' => 'Unexpected response format from API.',
                            'raw_response' => $data,
                        ], 500);
                    }
                } else {
                    return response()->json([
                        'success' => false,
                        'error' => 'Error communicating with AI service.',
                        'status_code' => $chat->status(),
                    ], $chat->status());
                }
            } else {
                return response()->json([
                    'success' => false,
                    'error' => '❌ Failed to transcribe audio.',
                ]);
            }


        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => 'Exception occurred: ' . $e->getMessage(),
            ], 500);
        }
    }


    public function getMessage($inputMessage)
    {
        Log::info('Input voice message:', ['input message:' => $inputMessage]);

        $context = "This is the provided business data:\n\n" . $this->longTextVar;

        $systemMessage = $this->getDescriptionDetails();

        return [
            ['role' => 'system', 'content' => $systemMessage],
            ['role' => 'user', 'content' => "User input: $inputMessage\n\nBusiness Data:\n$context"],
        ];
    }


    public function getDescriptionDetails(): string
    {
        return "You are a helpful assistant named Mark.
            When the user greets you (e.g., 'hello', 'hi'), always start your response with: 'Hi, I am Mark, how can I help you? just if the input message contain greets words.'
            not every response mention this message 'I am Mark, how can I help you?'.
            without mention this string 'PHP-style array' in response.
            If the user requests a report, reply with a PHP-style array: ['header' => [...], 'data' => [[...], [...]]]
            Otherwise, use the business data to intelligently answer user questions.  without appear string 'PHP-style array' in response.
            Always be friendly and identify yourself as Mark.
            - Do not generate a report if the user's input is not clearly related to the business context. Do not generate an empty report.
            - The response should return in arabic or english only";
    }

}
